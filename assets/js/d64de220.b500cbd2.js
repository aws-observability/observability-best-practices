"use strict";(self.webpackChunkobservability_best_practices=self.webpackChunkobservability_best_practices||[]).push([[6274],{17344:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=n(74848),s=n(28453);const o={},r="Choosing a tracing agent",a={id:"guides/choosing-a-tracing-agent",title:"Choosing a tracing agent",description:"Choose the right agent",source:"@site/docs/guides/choosing-a-tracing-agent.md",sourceDirName:"guides",slug:"/guides/choosing-a-tracing-agent",permalink:"/observability-best-practices/docs/guides/choosing-a-tracing-agent",draft:!1,unlisted:!1,editUrl:"https://github.com/aws-observability/observability-best-practices/docs/guides/choosing-a-tracing-agent.md",tags:[],version:"current",frontMatter:{},sidebar:"guides",previous:{title:"Best practices overview",permalink:"/observability-best-practices/docs/guides/"},next:{title:"Using Kubecost",permalink:"/observability-best-practices/docs/guides/cost/kubecost"}},c={},l=[{value:"Choose the right agent",id:"choose-the-right-agent",level:2}];function h(e){const t={a:"a",admonition:"admonition",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"choosing-a-tracing-agent",children:"Choosing a tracing agent"}),"\n",(0,i.jsx)(t.h2,{id:"choose-the-right-agent",children:"Choose the right agent"}),"\n",(0,i.jsxs)(t.p,{children:["AWS directly supports two toolsets for ",(0,i.jsx)(t.a,{href:"../signals/traces/",children:"trace"})," collection (plus our wealth of ",(0,i.jsx)(t.a,{href:"https://aws.amazon.com/products/management-and-governance/partners/",children:"observability partners"}),":"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.a,{href:"https://aws-otel.github.io/",children:"AWS Distro for OpenTelemetry"}),", commonly called ADOT"]}),"\n",(0,i.jsxs)(t.li,{children:["The X-Ray ",(0,i.jsx)(t.a,{href:"https://docs.aws.amazon.com/xray/latest/devguide/xray-instrumenting-your-app.html",children:"SDKs"})," and ",(0,i.jsx)(t.a,{href:"https://docs.aws.amazon.com/xray/latest/devguide/xray-daemon.html",children:"daemon"})]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["The selection of which tool or tools to use is a principal decision you must make as you evolve your observability solution. These tools are not mutually-exclusive, and you can mix them together as necessary. And there is a best practice for making this selection. However, first you should understand the current state of ",(0,i.jsx)(t.a,{href:"https://opentelemetry.io/",children:"OpenTelemetry (OTEL)"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["OTEL is the current industry standard specification for observabillity signalling, and contains definitions for each of the three core signal types: ",(0,i.jsx)(t.a,{href:"../signals/metrics/",children:"metrics"}),", ",(0,i.jsx)(t.a,{href:"../signals/traces/",children:"traces"}),", and ",(0,i.jsx)(t.a,{href:"../signals/logs",children:"logs"}),". However, OTEL has not always existed and has evolved out of earlier specifications such as ",(0,i.jsx)(t.a,{href:"https://openmetrics.io",children:"OpenMetrics"})," and ",(0,i.jsx)(t.a,{href:"https://opentracing.io",children:"OpenTracing"}),". Observability vendors began openly supporting OpenTelemetry Line Protocol (OTLP) in recent years."]}),"\n",(0,i.jsx)(t.p,{children:"AWS X-Ray and CloudWatch pre-date the OTEL specification, as do other leading observability solutions. However, the AWS X-Ray service readily accepts OTEL traces using ADOT. ADOT has the integrations already built into it to emit telemetry into X-Ray directly, as well as to other ISV solutions."}),"\n",(0,i.jsxs)(t.p,{children:["Any transaction tracing solution requires an agent and an integration into the underlying application in order to collect signals. And this, in turn, creates ",(0,i.jsx)(t.a,{href:"../faq/#what-is-technical-debt",children:"technical debt"})," in the form of libraries that must be tested, maintained, and upgraded, as well as possibly retooling if you choose to change your solution in the future."]}),"\n",(0,i.jsx)(t.p,{children:"The SDKs included with X-Ray are part of a tightly integrated instrumentation solution offered by AWS. ADOT is part of a broader industry solution in which X-Ray is only one of many tracing solutions. You can implement end-to-end tracing in X-Ray using either approach, but it\u2019s important to understand the differences in order to determine the most useful approach for you."}),"\n",(0,i.jsxs)(t.admonition,{type:"info",children:[(0,i.jsx)(t.p,{children:"We recommend instrumenting your application with the AWS Distro for OpenTelemetry if you need the following:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["The ability to send traces to multiple different tracing backends without having to re-instrument your code. For example, of you wish to shift from using the X-Ray console to ",(0,i.jsx)(t.a,{href:"https://zipkin.io",children:"Zipkin"}),", then only configuration of the collector would change, leaving your applicaiton code untouched."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Support for a large number of library instrumentations for each language, maintained by the OpenTelemetry community."}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(t.admonition,{type:"info",children:[(0,i.jsx)(t.p,{children:"We recommend choosing an X-Ray SDK for instrumenting your application if you need the following:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"A tightly integrated single-vendor solution."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Integration with X-Ray centralized sampling rules, including the ability to configure sampling rules from the X-Ray console and automatically use them across multiple hosts, when using Node.js, Python, Ruby, or .NET"}),"\n"]}),"\n"]})]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(96540);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);