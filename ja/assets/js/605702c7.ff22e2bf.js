"use strict";(self.webpackChunkobservability_best_practices=self.webpackChunkobservability_best_practices||[]).push([[2861],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(96540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}},63482:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"guides/dotnet/aws-native/metrics","title":"Metrics","description":"Metrics are essential in Observability because they provide quantitative data about system performance and behavior. This enables trend analysis and supports proactive monitoring to detect issues before they impact users.","source":"@site/docs/guides/dotnet/aws-native/metrics.md","sourceDirName":"guides/dotnet/aws-native","slug":"/guides/dotnet/aws-native/metrics","permalink":"/observability-best-practices/ja/guides/dotnet/aws-native/metrics","draft":false,"unlisted":false,"editUrl":"https://github.com/aws-observability/observability-best-practices/blob/main/docusaurus/docs/guides/dotnet/aws-native/metrics.md","tags":[],"version":"current","frontMatter":{},"sidebar":"guides","previous":{"title":"Logs","permalink":"/observability-best-practices/ja/guides/dotnet/aws-native/logs"},"next":{"title":"Traces","permalink":"/observability-best-practices/ja/guides/dotnet/aws-native/traces"}}');var a=n(74848),i=n(28453);const r={},o="Metrics",c={},l=[{value:"Use CloudWatch PutMetricData API call through AWS SDK for .NET",id:"use-cloudwatch-putmetricdata-api-call-through-aws-sdk-for-net",level:3},{value:"CloudWatch embedded metric format",id:"cloudwatch-embedded-metric-format",level:3},{value:"Use cases for using EMF",id:"use-cases-for-using-emf",level:4},{value:"Installation",id:"installation",level:4},{value:"Usage",id:"usage",level:4},{value:"ASP.NET Core",id:"aspnet-core",level:4}];function d(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"metrics",children:"Metrics"})}),"\n",(0,a.jsx)(t.p,{children:"Metrics are essential in Observability because they provide quantitative data about system performance and behavior. This enables trend analysis and supports proactive monitoring to detect issues before they impact users."}),"\n",(0,a.jsxs)(t.p,{children:["To learn about Metrics in general and the features of Amazon CloudWatch for Metric collection and analysis visit ",(0,a.jsx)(t.a,{href:"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/working_with_metrics.html",children:(0,a.jsx)(t.strong,{children:"Metrics in Amazon CloudWatch"})})]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch-metrics-basic-detailed.html",children:(0,a.jsx)(t.strong,{children:"While many AWS services have the ability to publish infrastructure metrics out-of-the-box to Amazon CloudWatch"})}),", this section will focus on capturing custom metrics from .NET applications and transporting them to Amazon CloudWatch metric monitoring systems for analysis."]}),"\n",(0,a.jsx)(t.h3,{id:"use-cloudwatch-putmetricdata-api-call-through-aws-sdk-for-net",children:"Use CloudWatch PutMetricData API call through AWS SDK for .NET"}),"\n",(0,a.jsx)(t.p,{children:"Include the Amazon.CloudWatch and Amazon.CloudWatch.Model NuGet packages in your code."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"using Amazon.CloudWatch;\nusing Amazon.CloudWatch.Model;\n"})}),"\n",(0,a.jsx)(t.p,{children:"Build the PutMetricDataRequest object that contains the namespace, metric name and value, dimensions and dimension values."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"var request = new PutMetricDataRequest\n{\n    Namespace = namespaceName,\n    MetricData = new List<MetricDatum>\n    {\n        new MetricDatum\n        {\n            MetricName = metricName,\n            Dimensions = new List<Dimension>\n            {\n                new Dimension\n                {\n                    Name = dimensionName,\n                    Value = dimensionValue\n                }\n            },\n            Value = metricValue\n        }\n    }\n};\n"})}),"\n",(0,a.jsx)(t.p,{children:"Send the metric data to Amazon CloudWatch by using the PutMetricData API call."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"using var client = new AmazonCloudWatchClient();\nawait client.PutMetricDataAsync(request);\n"})}),"\n",(0,a.jsx)(t.h3,{id:"cloudwatch-embedded-metric-format",children:"CloudWatch embedded metric format"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.a,{href:"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Embedded_Metric_Format.html",children:(0,a.jsx)(t.strong,{children:"CloudWatch embedded metric format (EMF)"})})," lets you create custom metrics asynchronously by writing logs to CloudWatch Logs. This approach allows you to:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Embed custom metrics alongside detailed log event data"}),"\n",(0,a.jsx)(t.li,{children:"Have CloudWatch automatically extract these metrics for visualization and alarming"}),"\n",(0,a.jsx)(t.li,{children:"Enable real-time incident detection"}),"\n",(0,a.jsx)(t.li,{children:"Query the associated detailed log events using CloudWatch Logs Insights"}),"\n",(0,a.jsx)(t.li,{children:"Gain deep insights into the root causes of operational events"}),"\n"]}),"\n",(0,a.jsx)(t.h4,{id:"use-cases-for-using-emf",children:"Use cases for using EMF"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Generate custom metrics across compute environments"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Easily generate custom metrics from Lambda functions without requiring custom batching code, making blocking network requests or relying on 3rd party software. Other compute environments (EC2, On-prem, ECS, EKS, and other container environments) are supported by installing the ",(0,a.jsx)(t.a,{href:"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Embedded_Metric_Format_Generation_CloudWatch_Agent.html",children:(0,a.jsx)(t.strong,{children:"CloudWatch Agent"})}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Linking metrics to high cardinality context"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Using the Embedded Metric Format, you will be able to visualize and alarm on custom metrics, but also retain the original, detailed and high-cardinality context which is queryable using ",(0,a.jsx)(t.a,{href:"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AnalyzingLogData.html",children:(0,a.jsx)(t.strong,{children:"CloudWatch Logs Insights"})}),". For example, the library automatically injects environment metadata such as Lambda Function version, EC2 instance and image ids into the structured log event data."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.a,{href:"https://github.com/awslabs/aws-embedded-metrics-dotnet",children:(0,a.jsx)(t.strong,{children:"aws-embedded-metrics-dotnet opensource repository"})})," has everything you need to get started."]}),"\n",(0,a.jsx)(t.h4,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(t.p,{children:"Include the Amazon.CloudWatch.EMF NuGet package in your code"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"using Amazon.CloudWatch.EMF\n"})}),"\n",(0,a.jsx)(t.p,{children:"You can instantiate a MetricsLogger that implements IDisposable and use it as shown below. The metrics will be flushed to the configured sink when the logger is disposed."}),"\n",(0,a.jsx)(t.h4,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'using (var logger = new MetricsLogger()) {\n    logger.SetNamespace("Canary");\n    var dimensionSet = new DimensionSet();\n    dimensionSet.AddDimension("Service", "aggregator");\n    logger.SetDimensions(dimensionSet);\n    logger.PutMetric("ProcessingLatency", 100, Unit.MILLISECONDS,StorageResolution.STANDARD);\n    logger.PutMetric("Memory.HeapUsed", "1600424.0", Unit.BYTES, StorageResolution.HIGH);\n    logger.PutProperty("RequestId", "422b1569-16f6-4a03-b8f0-fe3fd9b100f8");\n    \n}\n'})}),"\n",(0,a.jsx)(t.h4,{id:"aspnet-core",children:"ASP.NET Core"}),"\n",(0,a.jsxs)(t.p,{children:["We provide a helper package that helps with onboarding and provides default metrics for ",(0,a.jsx)(t.a,{href:"https://github.com/awslabs/aws-embedded-metrics-dotnet",children:(0,a.jsx)(t.strong,{children:"ASP.NET Core applications"})}),"."]}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Add the configuration to your Startup file."}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"public void ConfigureServices(IServiceCollection services) {\n    // Add the necessary services. After this is done, you will have the\n    // IMetricsLogger available for dependency injection in your\n    // controllers\n    services.AddEmf();\n}\n"})}),"\n",(0,a.jsxs)(t.ol,{start:"2",children:["\n",(0,a.jsx)(t.li,{children:"Add middleware to add default metrics and metadata to each request"}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    // Add middleware which will set metric dimensions based on the request routing\n    app.UseEmfMiddleware();\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["In any environment, other than AWS Lambda, we recommend running an out-of-process agent (the ",(0,a.jsx)(t.a,{href:"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Embedded_Metric_Format_Generation_CloudWatch_Agent.html",children:(0,a.jsx)(t.strong,{children:"CloudWatch Agent"})})," or FireLens / Fluent-Bit) to collect the EMF events. When using an out-of-process agent, this package will buffer the data asynchronously in process to handle any transient communication issues with the agent."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);